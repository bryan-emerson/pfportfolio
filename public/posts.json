[
  {
    "title": "My First Blog Post",
    "date": "May 30, 2024",
    "content": "Thanks for finding my blog! I will be using this blog to share examples of everyday issues that i encounter in my position as a remote frontend developer. Hopefully this will give you some insight to my skillset and how i tackle tickets I am given at work. I hope you enjoy reading and feel free to reach out to me if you have any questions or comments!",
    "imageSrc": "/bike.jpg"
  },
  {
    "title": "Real time data synchronization",
    "date": "May 30, 2024",
    "content": "Recently at work I was assigned a ticket that required me to implement a real time data synchronization feature. This feature would allow users of the Know My Menu app to see the publishing status of a menu in real time. Here, check out this user story: User opens a menu, the MenuPreview component FAB is orange for status 'active'. The user makes an edit to the menu, SWR mutate updates the backend with the edits. Now the user has made changes to the state in the database, but does not know if the live menu is in synch with the backend. The only way they can tell is by clicking the preview menu icon and visually inspecting the menu as changes do not go live until the 'Publish Menu' button has been clicked. I decided to leverage a combination of React Recoil, SWR, and a simple polling mechanism to keep the UI in sync with the backend. First I instantiated a menuStatus recoil atom to store the publishing status of the menu. I added functionality to the initial SWR fetch of the menu which set the menuStatus Recoil atom after a successful fetch. I subscribed the MenuPreview component to the menuStatus recoil atom.  Next I created a color map in the MenuPreview component, mapping the status of the menu to the relevant color...for exaple, if the status was 'publish_failed', the color of the MenuPreview component FAB would change to red. This MenuPreview component was rendered floating over the menu so users can see the menu publishing status at a glance while they are making menu edits. The next step was to add functionality to the publish menu button. I added an onClick attribute to the Publish Menu button that set the recoil atom to the status 'publishing' and the color map chnages the color of the MenuPreview component to yellow.. the status change set off a polling mechanism in the menu component that polls the back end for menu status as long as the menu status is 'publishing'. As soon as the menu status changes from publishing, the polling stops and the menuStatus recoil atom is updated with the new status. Since our app works perfectly all the time (LOL) the status has updated to 'active' and the PreviewIcon changes back to orange. A tooltip was instantiated to show the status on hover in addition to the visual color indication (accessibiity for color impoaired...) This was a fun ticket to work on and I learned a lot about Recoil and polling in the process. It would have been much simpler to use swr revalidate onFocus but the requirement was to have the status update in real time and I was instructed bny my senior dev to minimize unecessary calls to the backend. I am happy with the solution I came up with and I think it will be a great addition to the app.",
    "imageSrc": "/bike.jpg"
  },
  {
    "title": "My 3rd Blog Post",
    "date": "October 1, 2022",
    "content": "At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus id quod maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus. Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus id quod maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus. Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat",
    "imageSrc": "/bike.jpg"
  }
]